// Code generated by protoc-gen-go-grpc. DO NOT EDIT.
// versions:
// - protoc-gen-go-grpc v1.5.1
// - protoc             v3.21.12
// source: grpc_chat.proto

package grpcchat

import (
	context "context"
	grpc "google.golang.org/grpc"
	codes "google.golang.org/grpc/codes"
	status "google.golang.org/grpc/status"
)

// This is a compile-time assertion to ensure that this generated file
// is compatible with the grpc package it is being compiled against.
// Requires gRPC-Go v1.64.0 or later.
const _ = grpc.SupportPackageIsVersion9

const (
	GrpcChat_GetMessages_FullMethodName  = "/GrpcChat/GetMessages"
	GrpcChat_SendMessages_FullMethodName = "/GrpcChat/SendMessages"
)

// GrpcChatClient is the client API for GrpcChat service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://pkg.go.dev/google.golang.org/grpc/?tab=doc#ClientConn.NewStream.
type GrpcChatClient interface {
	GetMessages(ctx context.Context, in *Amount, opts ...grpc.CallOption) (grpc.ServerStreamingClient[Message], error)
	SendMessages(ctx context.Context, opts ...grpc.CallOption) (grpc.ClientStreamingClient[Text, Amount], error)
}

type grpcChatClient struct {
	cc grpc.ClientConnInterface
}

func NewGrpcChatClient(cc grpc.ClientConnInterface) GrpcChatClient {
	return &grpcChatClient{cc}
}

func (c *grpcChatClient) GetMessages(ctx context.Context, in *Amount, opts ...grpc.CallOption) (grpc.ServerStreamingClient[Message], error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	stream, err := c.cc.NewStream(ctx, &GrpcChat_ServiceDesc.Streams[0], GrpcChat_GetMessages_FullMethodName, cOpts...)
	if err != nil {
		return nil, err
	}
	x := &grpc.GenericClientStream[Amount, Message]{ClientStream: stream}
	if err := x.ClientStream.SendMsg(in); err != nil {
		return nil, err
	}
	if err := x.ClientStream.CloseSend(); err != nil {
		return nil, err
	}
	return x, nil
}

// This type alias is provided for backwards compatibility with existing code that references the prior non-generic stream type by name.
type GrpcChat_GetMessagesClient = grpc.ServerStreamingClient[Message]

func (c *grpcChatClient) SendMessages(ctx context.Context, opts ...grpc.CallOption) (grpc.ClientStreamingClient[Text, Amount], error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	stream, err := c.cc.NewStream(ctx, &GrpcChat_ServiceDesc.Streams[1], GrpcChat_SendMessages_FullMethodName, cOpts...)
	if err != nil {
		return nil, err
	}
	x := &grpc.GenericClientStream[Text, Amount]{ClientStream: stream}
	return x, nil
}

// This type alias is provided for backwards compatibility with existing code that references the prior non-generic stream type by name.
type GrpcChat_SendMessagesClient = grpc.ClientStreamingClient[Text, Amount]

// GrpcChatServer is the server API for GrpcChat service.
// All implementations must embed UnimplementedGrpcChatServer
// for forward compatibility.
type GrpcChatServer interface {
	GetMessages(*Amount, grpc.ServerStreamingServer[Message]) error
	SendMessages(grpc.ClientStreamingServer[Text, Amount]) error
	mustEmbedUnimplementedGrpcChatServer()
}

// UnimplementedGrpcChatServer must be embedded to have
// forward compatible implementations.
//
// NOTE: this should be embedded by value instead of pointer to avoid a nil
// pointer dereference when methods are called.
type UnimplementedGrpcChatServer struct{}

func (UnimplementedGrpcChatServer) GetMessages(*Amount, grpc.ServerStreamingServer[Message]) error {
	return status.Errorf(codes.Unimplemented, "method GetMessages not implemented")
}
func (UnimplementedGrpcChatServer) SendMessages(grpc.ClientStreamingServer[Text, Amount]) error {
	return status.Errorf(codes.Unimplemented, "method SendMessages not implemented")
}
func (UnimplementedGrpcChatServer) mustEmbedUnimplementedGrpcChatServer() {}
func (UnimplementedGrpcChatServer) testEmbeddedByValue()                  {}

// UnsafeGrpcChatServer may be embedded to opt out of forward compatibility for this service.
// Use of this interface is not recommended, as added methods to GrpcChatServer will
// result in compilation errors.
type UnsafeGrpcChatServer interface {
	mustEmbedUnimplementedGrpcChatServer()
}

func RegisterGrpcChatServer(s grpc.ServiceRegistrar, srv GrpcChatServer) {
	// If the following call pancis, it indicates UnimplementedGrpcChatServer was
	// embedded by pointer and is nil.  This will cause panics if an
	// unimplemented method is ever invoked, so we test this at initialization
	// time to prevent it from happening at runtime later due to I/O.
	if t, ok := srv.(interface{ testEmbeddedByValue() }); ok {
		t.testEmbeddedByValue()
	}
	s.RegisterService(&GrpcChat_ServiceDesc, srv)
}

func _GrpcChat_GetMessages_Handler(srv interface{}, stream grpc.ServerStream) error {
	m := new(Amount)
	if err := stream.RecvMsg(m); err != nil {
		return err
	}
	return srv.(GrpcChatServer).GetMessages(m, &grpc.GenericServerStream[Amount, Message]{ServerStream: stream})
}

// This type alias is provided for backwards compatibility with existing code that references the prior non-generic stream type by name.
type GrpcChat_GetMessagesServer = grpc.ServerStreamingServer[Message]

func _GrpcChat_SendMessages_Handler(srv interface{}, stream grpc.ServerStream) error {
	return srv.(GrpcChatServer).SendMessages(&grpc.GenericServerStream[Text, Amount]{ServerStream: stream})
}

// This type alias is provided for backwards compatibility with existing code that references the prior non-generic stream type by name.
type GrpcChat_SendMessagesServer = grpc.ClientStreamingServer[Text, Amount]

// GrpcChat_ServiceDesc is the grpc.ServiceDesc for GrpcChat service.
// It's only intended for direct use with grpc.RegisterService,
// and not to be introspected or modified (even as a copy)
var GrpcChat_ServiceDesc = grpc.ServiceDesc{
	ServiceName: "GrpcChat",
	HandlerType: (*GrpcChatServer)(nil),
	Methods:     []grpc.MethodDesc{},
	Streams: []grpc.StreamDesc{
		{
			StreamName:    "GetMessages",
			Handler:       _GrpcChat_GetMessages_Handler,
			ServerStreams: true,
		},
		{
			StreamName:    "SendMessages",
			Handler:       _GrpcChat_SendMessages_Handler,
			ClientStreams: true,
		},
	},
	Metadata: "grpc_chat.proto",
}
